clear all;close all;clc;
labels_Training = loadMNISTLabels('train-labels.idx1-ubyte');
images_Training = loadMNISTImages('train-images.idx3-ubyte');
image_Array = reshape(images_Training(:,1:60000),28,28,60000);

labels_Test = loadMNISTLabels('t10k-labels.idx1-ubyte');
images_Test = loadMNISTImages('t10k-images.idx3-ubyte');
%Each sample image is 28x28 pixels.
%Total observations is 60,000 for training.

%Define constants
d = 15;%Eigen-depth
classified_labels = zeros(10000,1);
error_Classification = zeros(12,1);


%1)Compute mean of all image samples
mean_samples = mean(image_Array,3);
%2)Subtract the mean to normalize the dataset
normalized_images = image_Array - reshape(repmat(mean_samples,1,60000),28,28,60000);
%3)Find covariance matrix
covariance_obs = cov(reshape(normalized_images,784,60000)');
%4)Compute eigen values
[eig_vec,eig_val] = eig(covariance_obs);

for dCount = 1:2:60
    %5)Fetch projection Matrix
    [Proj_Matrix,Proj_eig_values] = fn_FetchProjectionMatrix(eig_vec,eig_val,dCount);
    %6)Dimension reduction 
    projected_Samples = Proj_Matrix*reshape(normalized_images,784,60000);

    %Model the class using multivar Gaussian dist.
    mean_Model = [];var_Model = []
    for iCount = 0:9
        mean_Model(:,iCount+1) = mean(projected_Samples(:,find(labels_Training==iCount)),2);
        var_Model(:,:,iCount+1) = cov(projected_Samples(:,find(labels_Training==iCount))');

    end

    %1)Normalization of test data
    normalized_testData = images_Test-repmat(reshape(mean_samples,784,1),1,10000);
    projected_testData = Proj_Matrix*normalized_testData;

    

    for iCount = 1:10000
        p_x = zeros(9,1);
        for iCount2 = 0:9
           p_x(iCount2+1) = mvnpdf(projected_testData(:,iCount),mean_Model(:,iCount2+1),var_Model(:,:,iCount2+1));
        end
        [~,index_p] = max(p_x);
        classified_labels(iCount,1) = index_p - 1;
    end
    [C,order] = confusionmat(labels_Test,classified_labels);
    error_Classification(dCount) = (10000-trace(C))/100;

end

figure;
hold off;
stem(1:size(error_Classification),error_Classification);grid on; hold all;
[~,index_min] = min(error_Classification(error_Classification~=0));
stem(index_min,error_Classification(index_min),'linewidth',2,'marker','x','markersize',10);
xlabel('d (eigen-depth)');
yla
